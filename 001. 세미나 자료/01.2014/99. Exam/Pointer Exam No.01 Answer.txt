정답 1. 4Byte 

정답 2. 포인터가 가리키는 데이터의 사이즈가 각각 다르기 때문에(그래서??????)

수정-> 	포인터에 데이터 사이즈에 따라 다음에 가리킬 주소값을 찾아낼 수 있다
	예를 들어 int형 포인터는 4바이트씩 넘어가고 char 와 double은 이와 다르므로
	포인터에도 가리킬 데이터 사이즈에 따른 형태가 필요하다
   

3. 오답(함수내에서 잡은 메모리가 함수 밖으로 나가지 않게 되어 있음) 

boolean char_return(void)
{
	char *arr = (char*)malloc(sizeof(char)*16);
	
	if(arr==NULL)
		return -1;
		
	else
		return true;

}

-> 수정버전
boolean char_return(char* arr_p)
{
	char *arr = (char*)malloc(sizeof(char)*16);
	
	if(arr==NULL)
		return -1;
		
	else{
	arr_p=arr;
	return true;
	}

}


정답 4. 동작이 가능하다  pszBuffer는 1차원 배열로 볼 수 있기 때문
   pszBuffer[1~26] 에는 알파벳이 순서대로 저장될 것이다



5. 오답(문자열 크기와 메모리 크기가 일치하지 않음)

->수정

	char* arr=(char*)malloc(sizeof(char)*20);
	gets(arr);     //input string : this exam is very easy!

	arr[20]='\0';
	puts(arr);


오답 6.


#include "stdafx.h"
#include <iostream>

using namespace std;


int _tmain(int argc, _TCHAR* argv[])
{
	int i =0;
	char **arr = NULL;
	arr = (char**)malloc(sizeof(char*)*10);
	for(i=0; i< 10; i++)
	{
		//*(arr+i) = (char*)malloc(sizeof(char)*10);
		arr[i] = (char*)malloc(sizeof(char)*10);
	
	}

	arr[0] = "helloooooooooo";

	puts(arr[0]);

	return 0;
}


	
7. 오답(잘 생각해 보길...)
->수정
	김혜민


3, 5번 참고

	#include "stdafx.h"
	#include <string>
	
	#define STRING_		"This is very easy exam!"
	
	bool alloc(char **pszText)
	{
		*pszText = (char*)malloc(strlen(STRING_) + 1);
	
		if (NULL == *pszText)
			return false;
	
		strcpy(*pszText, STRING_);
	
		return true;
	}
	
	int _tmain(int argc, _TCHAR* argv[])
	{
	
		char		*pStr = NULL;
	
		if (alloc(&pStr))
			printf("%s\n", pStr);
		else
			printf("Error!\n");
	
		free(pStr);
		return 0;
	}
